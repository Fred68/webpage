<?php
// Variabili globali
$timeout = 60;											// timeout in secondi
$pausaWrong = 1;										// Pausa se utente errato
$sep = "*";												// Separatore
$keystrval   = "11111111111111111111111111111111";		// Password (fittizia) 32 caratteri 

$host="127.0.0.1";										// Server name
$username="root";										// Mysql username DA CAMBIARE
$password="";											// Mysql password DA AGGIORNARE

$db_name="my_fred68";									// Nome database per il login
$pertdb = "pert01";										// Nome database del pert (eventualmente identico)

$tbl_name="members";									// Tabella utenti
$tbl_log="logged";										// Tabella log

$pwdColumn="passwd";									// Nome della colonna con la password criptata
$keystr="keystr";										// Nome colonna con chiave di criptatura
$pwddb="pwddb";											// Nome colonna con password database
$usrColumn="usrname";									// Nome della colonna utente (anche per la tabella $tbl_log)
$sidColumn="sid";										// Nome della colonna con session_id
$lgtmColumn="lgtm";										// Nome della colonna con log time


function serverPost($t1, $t2, $sec)						// FUNZIONE DI PROVA
	{
	sleep($sec);
	$txt = $t1."\n".$t2."\n".microtime();
	return $txt;
	}
function addpadding($string, $blocksize = 32)			// Aggiunge padding PKCS7
	{													// Thanks to http://blog.djekldevelopments.co.uk/?p=334)
    $pad = $blocksize - (strlen($string) % $blocksize);
    $string .= str_repeat(chr($pad), $pad);
    return $string;
	}
function strippadding($string)							// Elimina padding
	{													// Thanks to http://blog.djekldevelopments.co.uk/?p=334)
	$slast = ord(substr($string, -1));
	$slastc = chr($slast);
	$pcheck = substr($string, -$slast);
	if(preg_match("/$slastc{".$slast."}/", $string))
		{
		$string = substr($string, 0, strlen($string)-$slast);
		return $string;
		}
	else
		{
		return false;
		}
	}
function encrypt($string="")							// Criptatura messaggio
	{
	global $sep;
	$msg = "";
	if(isset($_SESSION['keystr']))
		{
		$keystrval = $_SESSION['keystr'];
		$enc = "";											// Messaggio criptato (inizializzato a zero)
		$size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);	// Dimensione dell'iv
		$ivstrauto = mcrypt_create_iv ($size);				// Creazione di un iv casuale [in quale formato ?]
		$key = base64_decode($keystrval);
		$enc = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, addpadding($string), MCRYPT_MODE_CBC, $ivstrauto);	// Codifica
		$msg = base64_encode($enc).$sep.base64_encode($ivstrauto);				// Unisce messaggio criptato, sepratore e iv
		}
    return $msg;
	}
function decrypt($msg = "")								// Decriptatura messaggio
	{
	global $sep;
	$ret = "";
	if(isset($_SESSION['keystr']))
		{
		$keystrval = $_SESSION['keystr'];
		$key = base64_decode($keystrval);
		$iv = substr($msg, strrpos($msg, $sep) + 1);		// Estrae l'iv
		$msg = str_replace($sep.$iv, "", $msg);				// Elimina iv e separatore
		$string = base64_decode($msg);
		$ret = strippadding(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $string, MCRYPT_MODE_CBC, base64_decode($iv)));
		}
	return $ret;
	}
function connectIntDB(&$err, &$msg)
	{
	global $host, $db_name, $username, $password;
	$conn = null;
	$ok = false;
	try
		{												// Apre connessione a database
		$conn = new PDO("mysql:host=$host;dbname=$db_name", $username, $password);
		$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		$ok = true;
		}
	catch(PDOException $e)								// Se errore, chiude la connessione
		{
		$err .= $e->getMessage();
		$conn = null;
		}
	return $conn;
	}
function login($usr,$pwd)								// Connette l'utente
	{
	#warning 	RISCRIVERE MEGLIO TUTTA LA FUNZIONE ED ESAMINARE BENE I CASI (PROBABILE ERRORE). POI SEMPLIFICARE ED USARE FUNZIONI SEPARATE
	global $username, $password, $db_name, $host, $usrColumn, $pwdColumn, $tbl_name, $keystr, $keystrval, $pwddb, $tbl_log, $sidColumn, $txtColumn;
	$msg = "";
	$err = "";
	$conn = connectIntDB($err, $msg);	

	$myusername=preg_replace("/[^a-zA-Z0-9@.]+/", "", $usr);			// Filtra...
	$mypassword=sha1(preg_replace("/[^a-zA-Z0-9@.]+/", "", $pwd));		// ...solo alfanumerico, punto e chiocciola
	$count=0;															// Numero utenti trovati
	$logcount=0;														// Numero utenti loggati trovati
	if($conn!=null)
		{
		$sql="SELECT COUNT(*) FROM $tbl_name WHERE ".$usrColumn."='$myusername' AND ".$pwdColumn."='$mypassword'";
		try
			{
			$stmt = $conn->prepare($sql);
			$stmt->execute();
			$count=$stmt->fetchColumn();					// Ottiene il numero di record con utente e pwd (criptata) -> $count
			}
		catch(PDOException $e)
			{
			$err .= $e->getMessage();						// Se errore, chide la connessione
			$conn = null;
			}
		}
	if($count>0)						// Se trova almeno un record con utente e password, legge chiave e password della prima riga trovata e... 
		{								// ...lascia aperta la connessione
		$sql="SELECT ".$keystr.", ".$pwddb." FROM $tbl_name WHERE ".$usrColumn."='$myusername' AND ".$pwdColumn."='$mypassword'";
		try
			{
			$stmt = $conn->prepare($sql);
			$stmt->execute();
			$rows = $stmt->fetchAll();				// Estrae tutte le righe della query
			$row = $rows[0];						// Sceglie la prima (ed unica)
			$keystrval = $row[0];					// Legge la chiave
			$pwddbval = $row[1];					// Legge la password del db
			}
		catch(PDOException $e)						// Se errore, chide la connessione
			{
			$err .= $e->getMessage();
			$conn = null;							
			}
		}
	else											// Se non ci sono utenti 
		{
		$conn = null;								// Chiude la connessione	
		}
	if($conn!=null)									// Se la connessione è aperta, prosegue...
		{
		$sql="SELECT COUNT(*) FROM $tbl_log WHERE ".$usrColumn."='$myusername'";
		try
			{
			$stmt = $conn->prepare($sql);
			$stmt->execute();
			$logcount=$stmt->fetchColumn();			// Ottiene il numero di record utenti loggati -> $logcount
			}
		catch(PDOException $e)						// Se errore, chiude la connessione
			{
			$err .= $e->getMessage();
			$conn = null;
			}
		if($logcount>0)								// Se già connesso, azzera il conteggio (a -1, per distiguerlo)
			{
			$err .= $logcount." utenti ".$myusername." gia` connessi";
			$count = -1;
			}
		}
	if($count==1)									// Login corretto, solo un utente
		{
		if(!isset($_SESSION['usr']))				// Se $_SESSION['usr'] non esiste ancora, allora la imposta
			{
			$_SESSION['usr'] = $myusername;
			$_SESSION['loginTime'] = time();
			$_SESSION['lastTime'] = time();
			$_SESSION['keystr'] = $keystrval;
			$_SESSION['pwddb'] = $pwddbval;
			
			// Inserisce l'utente nella lista degli utenti 'loggati'
			$sql = "INSERT INTO ".$tbl_log."(".$sidColumn.", ".$usrColumn.") VALUES('".session_id()."', '".$myusername."')";
			try
				{
				$stmt = $conn->prepare($sql);
				$stmt->execute();
				$msg .= "Login completato: ".$_SESSION['usr']."\nsid: ".session_id();	// Se tutto ok, imposta il messaggio
				}
			catch(PDOException $e)
				{
				$err .= "Error: ".$e->getMessage();
				}
			}
		else										// Se $_SESSION['usr'] esiste, un login è già stato eseguito.  
			{
			$err .= "Login gia` eseguito";
			$count = -1;
			}
		}
	else
		{
		if($count==0)
			{
			$err .= "Utente o password errati";
			}
		else if($count==-1)
			{
			$err .= "Login gia` eseguito";	
			}
		session_unset();
		session_destroy();
		}
	$conn = null;								// Disconnette dal database
	return "MESSAGGIO\n".$msg."\nERRORI\n".$err;
	}

#warning SE SI ESEGUE UN SECONDO LOGIN, SI CREA UNA NUOVA CONNESSIONE (CHE FALLISCE) MA SI PERDE LA PRIMA
#warning AGGIUNGERE FUNZIONE DI CLEANUP E CHIAMATA, PER DISCONNETTERE UTENTE SENZA ESSERSI CONNESSI
#warning AGGIUNGERE, SE POSSIBILE, UNA RISPOSTA DI CONFERMA O DI DINIEGO (CRIPTATA) AL LOGIN
#warning Nel primo login viene inviata la password su connessione nonp protetta.
#warning Prevedere handshaking dopo il primo login: se login ok -> invia risposta criptata e di mette in attesa -> poi riceve risposta criptata -> se errore: disconnette
	
function logout()										// Disconnette l'utente
	{
	global $username, $password, $db_name, $host, $usrColumn, $pwdColumn, $tbl_name, $keystr, $keystrval, $pwddb, $tbl_log, $sidColumn, $txtColumn;
	$msg = "";
	$conn = null;
	if(isset($_SESSION['usr']))
		{
		try
			{
			$conn = new PDO("mysql:host=$host;dbname=$db_name", $username, $password);
			$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			}
		catch(PDOException $e)
			{
			$msg = $e->getMessage()."\nFallita connessione al DB per logout()";
			$conn = null;
			}
		if($conn != null)
			{
			$sql = "DELETE FROM ".$tbl_log." WHERE ".$usrColumn." = '".$_SESSION['usr']."'";
			try
				{
				$stmt = $conn->prepare($sql);
				$stmt->execute();
				}
			catch(PDOException $e)
				{
				$msg .= "Error: ".$e->getMessage();
				}	
			}
		$conn = null;
		session_unset();
		session_destroy();
		$msg .= "Utente disconnesso.";
		}
	else
		{
		$msg .= "Utente non ancora connesso";
		}
	return $msg;
	}
function refreshStat()									// Stato della connessione
	{
	global $timeout;
	$msg = "";
	if (isset($_SESSION['usr']))
		{
		$tt = time()-$_SESSION['lastTime'];
		$_SESSION['lastTime'] = time();
		if($tt > $timeout)
			{
			$msg = "Trascorsi ".$tt." secondi. Timeout dopo ".$timeout."s.";
			session_unset();
			session_destroy();
			}
		else
			{
			$msg = "Utente: ".$_SESSION['usr']."\n";
			$msg .="Session: ".session_id()."\n";
			$msg .= "Tempo trascorso dal login: ".(time()-$_SESSION['loginTime'])."\n";
			$msg .= "Tempo trascorso da ultima operazione: ".$tt;
			}
		}
	else
		{
		$msg = "Utente non connesso";
		session_unset();
		session_destroy();
		}
	return $msg;
	}
function refresh()										// Refresh. Messaggio solo se errori
	{
	global $timeout;
	$msg = "";
	if (isset($_SESSION['usr']))
		{
		$tt = time()-$_SESSION['lastTime'];
		$_SESSION['lastTime'] = time();
		if($tt > $timeout)
			{
			session_unset();
			session_destroy();
			$msg = "Tempo scaduto";
			}
		}
	else
		{
		session_unset();
		session_destroy();
		$msg = "Utente non connesso";
		}
	return $msg;
	}
function execute($cmd = "")								// Esecuzione di un comando
	{
	$msg = "Messaggio\n".decrypt($cmd)."\nricevuto...";
	echo encrypt($msg);
	}
function query($cmd = "", $crypt = true)				// Esecuzione di una query mysql
	{
	global $pertdb, $host;
	if($crypt)
		$sql = decrypt($cmd);							// Legge il comando
	else
		$sql = $cmd;
	$c = null;											// Connessione
	if ( isset($_SESSION['usr']) && isset($_SESSION['pwddb']))
	 	{
	 	try
	 		{
	 		$c = new PDO("mysql:host=$host;dbname=$pertdb", $_SESSION['usr'], $_SESSION['pwddb']);
	 		$c->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			try
				{
				$stmt = $c->prepare($sql);
				$stmt->execute();
				$result = $stmt->fetchAll(PDO::FETCH_ASSOC);
				if($result !== false)
					{
					$msg = "Query eseguita.\n";  
					foreach($result as $r)
						{
						foreach($r as $x)
							$msg .= $x."\t";
						$msg .= "\n";
						}
					}
				else
					{
					$msg = "Nessun risultato";
					}
				}
			catch(PDOException $e)
				{
				$msg = "Query error: ".$e->getMessage();
				}
	 		}
	 	catch(PDOException $e)
	 		{
			$msg = "WARNING: Connection error:\n";
	 		$msg .= $e->getMessage();
	 		}
	 	$c = null;										// Disconnette dal database
		}
	if($crypt)
		$msg = encrypt($msg);
	return $msg;
	}
function sqlcom($cmd = "", $crypt = true)				// Esecuzione di un comando mysql
	{
	global $pertdb, $host;
	$msg = "";
	if($crypt)
		$sql = decrypt($cmd);							// Legge il comando
	else
		$sql = $cmd;
	$c = null;											// Connessione
	if ( isset($_SESSION['usr']) && isset($_SESSION['pwddb']))
	 	{
	 	try
	 		{
	 		$c = new PDO("mysql:host=$host;dbname=$pertdb", $_SESSION['usr'], $_SESSION['pwddb']);
	 		$c->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			try
				{
				$count = $c->exec($sql);
				if($count !== false)
					$msg = "Affected ".$count." rows.";
				else
					$msg = "No rows affected";
				}
			catch(PDOException $e)
				{
				$msg .= "Exec error: ".$e->getMessage();
				}
	 		}
	 	catch(PDOException $e)
	 		{
			$msg = "Connection error:\n";
	 		$msg .= $e->getMessage();
	 		}
	 	$c = null;										// Disconnette dal database
		}
	if($crypt)
		$msg = encrypt($msg);
	return $msg;
	}
function command()										// Lettura ed esecuzione di un comando (Post)
	{
	$a = $_POST["a"];
	$b = $_POST["b"];
	$c = $_POST["c"];
	switch($a)
		{
		case "login":
			echo login($b,$c);
			break;
		case "logout":
			echo logout();
			break;
		case "status":
			echo refreshStat();
			break;
		case "encode":
			echo encrypt($b);
			refresh();
			break;
		case "decode":
			echo decrypt($b);
			refresh();
			break;
		case "exe":
			echo execute($b);
			refresh();
			break;
		case "query":
			if($c == "nocrypt")
				echo query($b,false);
			else
				echo query($b);
			refresh();
			break;
		case "exec":
			if($c == "nocrypt")
				echo sqlcom($b,false);
			else
				echo sqlcom($b);
			refresh();
			break;
		case "refresh":
			echo refresh();		// echo refresh solo qui, per verificare connessione
			break;
		default:
			echo "command unknown";
			break;
		}
	}

// function destroy($sessionId)
// 	{
// 	global $username, $password, $db_name, $host, $tbl_log, $sidColumn, $txtColumn;
// 	$msg = "Session destroy, Session_ID: '$sessionId'\n";
	// try
	// 	{
	// 	$conn = new PDO("mysql:host=$host;dbname=$db_name", $username, $password);
	// 	$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	// 	}
	// catch(PDOException $e)
	// 	{
	// 	$msg = $e->getMessage();
	// 	}
	// 
	// $sql = "INSERT INTO ".$tbl_log."(".$sidColumn.", ".$txtColumn.") VALUES('".$sessionId."','EXIT')";
	// $msg .= $sql;
	// try
	// 	{
	// 	$stmt = $conn->prepare($sql);
	// 	$stmt->execute();
	// 	}
	// catch(PDOException $e)
	// 	{
	// 	$msg = "Error: ".$e->getMessage();
	// 	}
	// $conn = null;	
// 	return true;
// 	}

// ATTENZIONE !!!
// Tutti gli handler DEVONO ESSERE COMPLETATI, se no la sessione termina (almeno il read())
// // function open($path, $name)
// // 	{
// // 	print "Session opened, path: $path, name: $name\n";
// // 	return true;
// // 	}
// function close()
// 	{
// 	print "Session closed\n";
// 	return true;
// 	}
// function read($sessionId)
// 	{
// 	print "Session read. Sess_ID: $sessionId\n";
//     return '';
// 	}
// function write($sessionId, $data)
// 	{
// 	print "Session value written. Sess_ID: $sessionId, Data: $data\n";
// 	return true;
// 	}
// function gc($lifetime)
// 	{
// 	print "Session garbage collection called. Lifetime: $lifetime\n";
// 	return true;
// 	}
// function nop() {return true;}

?>
